@using testJqTable.Models

@model TableViewModel

@{
    ViewBag.Title = "Table";

    if (IsAjax)
    {
	   Layout = null;
    }
}

<link href="~/Content/codemirror.css" rel="stylesheet"/>
<link href="~/Content/jquery.dataTables.min.css" rel="stylesheet" />
@*<link href="~/Content/dataTables.bootstrap.css" rel="stylesheet"/>*@
<link href="~/Content/jquery.loadmask.css" rel="stylesheet"/>

<style>
    td.details-control {
	   background: url('../../images/details_open.png') no-repeat center center;
	   cursor: pointer;
    }
    tr.shown td.details-control {
	   background: url('../../images/details_close.png') no-repeat center center;
    }

    .tableScroll {
        width: 1140px;
        margin: 0 auto;
    }

</style>

<h2>@ViewBag.Title</h2>

<div>
    <section id="loginForm">
	   @using (Ajax.BeginForm("Index", new { controller = "Table" },
		  new AjaxOptions
		  {
			 HttpMethod = "Post",
			 InsertionMode = InsertionMode.Replace,
			 UpdateTargetId = "container",
			 OnBegin = "OnBegin",
			 OnSuccess = "OnSuccess",
			 OnComplete = "OnComplete"
		  }, new
		  {
			 @class = "form-horizontal",
			 role = "form"
		  }))
	   {
		  @Html.AntiForgeryToken()
		  @Html.ValidationSummary(true, "", new { @class = "text-danger" })

		  <div class="form-group">
			 @Html.LabelFor(m => m.TableCategory, new { @class = "col-md-2 control-label" })
			 <div class="col-md-10">
				@Html.DropDownListFor(a => a.TableCategory, Model.CategorySelectItemList, new { @class = "form-control" })
			 </div>
		  </div>

		  <div class="form-group">
			 <div class="col-md-offset-2 col-md-10">
				<input type="submit" value="Submit" class="btn btn-default" />
			 </div>
		  </div>
	   }
    </section>

    <section id="TableSection">
	   @if (Model.CategoryAList != null && Model.CategoryAList.Count > 0 && Model.TableCategory == TableCategoryEnum.CagegoryA)
	   {
		  @GetCategoryAHtml()
	   }
	   else if (Model.CategoryBList != null && Model.CategoryBList.Count > 0 && Model.TableCategory == TableCategoryEnum.CategoryB)
	   {
		  @GetCategoryBHtml()
	   }
        else if (Model.CategoryCList != null && Model.CategoryCList.Count > 0 && Model.TableCategory == TableCategoryEnum.CategoryC)
        {
            @GetCategoryCHtml()
        }
    </section>
</div>

@section scripts
{
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/Scripts/codemirror.js"></script>
    <script src="~/Scripts/sql.js"></script>
    <script src="~/Scripts/jquery.dataTables.min.js"></script>
    @*<script src="~/Scripts/dataTables.bootstrap.js"></script>*@
    <script src="~/Scripts/jquery.loadmask.js"></script>

    <script type="text/javascript" language="javascript">

	   $(document).ready(function() {

		  //InitCommandText();

		  //InitTable();
	   });


	   function InitCommandText() {

		  $("textarea[id^='commandText_']:visible").each(function(i, elem) {
			 CodeMirror.fromTextArea(elem, {
				mode: "text/x-mysql",
				indentWithTabs: true,
				smartIndent: true,
				lineNumbers: true,
				matchBrackets: true,
				autofocus: false,
				firstLineNumber: 1,
				readOnly: true
			 });
		  });
	   }

	   function InitTable() {

	       var isScrollX = $("#TableCategory").val() === "CategoryC";

		  // setting column search
	       if (!isScrollX) {
	           InitColumnSearchInput();
	       }

		  var table = $("#table").DataTable({
			  "columnDefs": [ {
				"searchable": false,
				"orderable": false,
				"targets": 0
			 } ],
			 "order": [[ 1, 'asc' ]],
                "scrollX" : isScrollX
		  });

	       if (isScrollX) {
	           $("div.dataTables_wrapper").addClass("tableScroll");
	       } else {

	           $("div.dataTables_wrapper").removeClass("tableScroll");

                // auto index column
	           AddIndexColumn(table);

                // column search
	           AddColumnSearch(table);


                // show detail table
	           AddDetailTable(table);
	       }
	   }

        function InitColumnSearchInput() {
            $('#table tfoot tr th').each( function () {
			 var title = $('#table tfoot tr th').eq( $(this).index() ).text();
			 $(this).html( '<input type="text" placeholder="Search '+title+'" />' );
		  } );
        }

        function AddIndexColumn(table){
            table.on( 'order.dt search.dt', function () {
			 table.column(0, {search:'applied', order:'applied'}).nodes().each( function (cell, i) {
				cell.innerHTML = i+1;
			 } );
		  } ).draw();
        }

        function AddColumnSearch(table) {
            table.columns().every( function () {
			 var that = this;

			 $('input', this.footer()).on( 'keyup change', function () {
				that.search(this.value).draw();
			 } );
		  } );
        }

        function AddDetailTable(table) {
            $('#table tbody').on('click', 'td.details-control', function() {
			 var tr = $(this).closest('tr');
			 var row = table.row(tr);

			 if (row.child.isShown()) {
				// This row is already open - close it
				row.child.hide();
				tr.removeClass('shown');
			 } else {
				// Open this row
				row.child(format({ name : "name123", extn : "extn 456" })).show();
				tr.addClass('shown');
			 }
		  });
        }

	   function format(d) {
		  // `d` is the original data object for the row
		  return '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;">' +
			 '<tr>' +
			 '<td>Full name:</td>' +
			 '<td>' + d.name + '</td>' +
			 '</tr>' +
			 '<tr>' +
			 '<td>Extension number:</td>' +
			 '<td>' + d.extn + '</td>' +
			 '</tr>' +
			 '<tr>' +
			 '<td>Extra info:</td>' +
			 '<td>And any further details here (images etc)...</td>' +
			 '</tr>' +
			 '</table>';
	   }

	   function InitDetail() {
		  $(".btnDetail").click(function() {

			 var id = $(this).data("id");

			 var url = "@Url.Action("GetOtherTable", "Table")" + "/" + id;

			 PopupCenterDual(url, "OtherTable", 500, 300);
		  });
	   }

	   function PopupWindow(url, title, w, h) {
		  var left = (screen.width / 2) - (w / 2);
		  var top = (screen.height / 2) - (h / 2);

		  return window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);
	   }

	   function PopupCenterDual(url, title, w, h) {
		  var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
		  var dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top;
		  var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
		  var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

		  var left = ((width / 2) - (w / 2)) + dualScreenLeft;
		  var top = ((height / 2) - (h / 2)) + dualScreenTop;
		  var newWindow = window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);

		  // Puts focus on the newWindow
		  if (window.focus) {
			 newWindow.focus();
		  }
	   }

	   function OnComplete() {
	   }

	   function OnSuccess() {
		  InitCommandText();

		  InitTable();

		  $("#container").unmask();

		  InitDetail();
	   }

	   function OnBegin() {
		  $("#container").mask("Loading...");
	   }
    </script>
}


@helper GetCategoryAHtml()
{
    <table id="table" class="table table-bordered display dataTable">
	   <thead>
		  <tr>
			 <th>#</th>
			 <th>Id</th>
			 <th>Name</th>
			 <th>CommandText</th>
		  </tr>
	   </thead>

	   <tfoot>
		  <tr>
			 <th>#</th>
			 <th>Id</th>
			 <th>Name</th>
			 <th>CommandText</th>
		  </tr>
	   </tfoot>
	   <tbody>
		  @for (int i = 0; i < Model.CategoryAList.Count; i++)
		  {
			 var item = Model.CategoryAList[i];

			 <tr>
				<td></td>
				<td>@item.Id</td>
				<td>@item.Name</td>
				<td>
				    <textarea id="@("commandText_" + i)" >@item.CommandText</textarea>
				</td>
			 </tr>
		  }
	   </tbody>
    </table>
}

@helper GetCategoryBHtml()
{
    <table id="table" class="table table-bordered display dataTable">
	   <thead>
		  <tr>
			 <th>#</th>
			 <th>Id</th>
			 <th>Name</th>
			 <th>Tel</th>
			 <th>CommandText</th>
			 <th>Detail 1</th>
			 <th>Detail 2</th>
		  </tr>
	   </thead>
	   <tfoot>
		  <tr>
			 <th>#</th>
			 <th>Id</th>
			 <th>Name</th>
			 <th>Tel</th>
			 <th>CommandText</th>
			 <th>Detail 1</th>
			 <th>Detail 2</th>
		  </tr>
	   </tfoot>
	   <tbody>
		  @for (int i = 0; i < Model.CategoryBList.Count; i++)
		  {
			 var item = Model.CategoryBList[i];

			 <tr>
				<td></td>
				<td>@item.Id</td>
				<td>@item.Name</td>
				<td>@item.Tel</td>
				<td>
				    <textarea id="@("commandText_" + i)">@item.CommandText</textarea>
				</td>
				<td class="details-control"></td>
				<td>
				    <button id="@("btn_" + i)" data-id="@(item.Id)" class="btnDetail">Detail</button>
				</td>
			 </tr>
		  }
	   </tbody>
    </table>
}

@helper GetCategoryCHtml()
{
    <table id="table" class="table table-bordered display dataTable nowrap" style="width: 100%">
        <thead>
            <tr>
                <th>#</th>
                <th>Id</th>
                <th>Name</th>
                <th>Tel</th>
                <th>Address</th>
                <th>Age</th>
                <th>Birth</th>
                <th>Note</th>
                <th>Note</th>
                <th>Note</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.CategoryCList.Count; i++)
            {
                var item = Model.CategoryCList[i];

                <tr>
                    <td>@(i + 1)</td>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Tel</td>
                    <td>@item.Address</td>
                    <td>@item.Age</td>
                    <td>@item.Birth.ToShortDateString()</td>
                    <td>@item.Note</td>
                    <td>@item.Note</td>
                    <td>@item.Note</td>
                </tr>
            }
        </tbody>
    </table>
}